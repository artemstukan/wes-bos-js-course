const toppings = [
        'Mushrooms ',
        'Tomatoes',
        'Eggs',
        'Chili',
        'Lettuce',
        'Avocado',
        'Chiles',
        'Bacon',
        'Pickles',
        'Onions',
        'Cheese',
];

const students = [
        {
                id: '11ce',
                first_name: 'Dall',
                last_name: 'Puckring',
        },
        {
                id: '2958',
                first_name: 'Margarete',
                last_name: 'Brandi',
        },
        {
                id: '565a',
                first_name: 'Bendicty',
                last_name: 'Woodage',
        },
        {
                id: '3a16',
                first_name: 'Micki',
                last_name: 'Mattes',
        },
        {
                id: 'f396',
                first_name: 'Flory',
                last_name: 'Gladeche',
        },
        {
                id: 'de5f',
                first_name: 'Jamill',
                last_name: 'Emilien',
        },
        {
                id: '54cb',
                first_name: 'Brett',
                last_name: 'Aizikowitz',
        },
        {
                id: '9135',
                first_name: 'Lorry',
                last_name: 'Smallman',
        },
        {
                id: '978f',
                first_name: 'Gilly',
                last_name: 'Flott',
        },
];

const people = [
        {
                birthday: 'April 22, 1993',
                names: {
                        first: 'Keith',
                        last: 'Buckley',
                },
        },
        {
                birthday: 'January 3, 1975',
                names: {
                        first: 'Larry',
                        last: 'Heep',
                },
        },
        {
                birthday: 'February 12, 1944',
                names: {
                        first: 'Linda',
                        last: 'Bermeer',
                },
        },
];

const buns = ['egg', 'wonder', 'brioche'];

const meats = {
        beyond: 10,
        beef: 5,
        pork: 7,
};

const prices = {
        hotDog: 453,
        burger: 765,
        sausage: 634,
        corn: 234,
};

const orderTotals = [342, 1002, 523, 34, 634, 854, 1644, 2222];

const feedback = [
        { comment: 'Love the burgs', rating: 4 },
        { comment: 'Horrible Service', rating: 2 },
        { comment: 'Smoothies are great, liked the burger too', rating: 5 },
        { comment: 'Ambiance needs work', rating: 3 },
        { comment: 'I DONT LIKE BURGERS', rating: 1 },
];

const faces = ['üòÉ', 'ü§†', 'ü§°', 'ü§ë', 'üòµ', 'üåû', 'üê∂', 'üò∫'];

const inventory = [
        { type: 'shirt', price: 4000 },
        { type: 'pants', price: 4532 },
        { type: 'socks', price: 234 },
        { type: 'shirt', price: 2343 },
        { type: 'pants', price: 2343 },
        { type: 'socks', price: 542 },
        { type: 'pants', price: 123 },
];

/*
      Looping Methods
    */

function logToppings(topping, index, array) {
        console.log(' ---------------- ', index);
        console.log(`current topping: ${topping}`);
        if (index) {
                console.log(`prev topping: ${array[index - 1]}`);
        }
        if (index != array.length - 1) {
                console.log(`next topping: ${array[index + 1]}`);
        } else {
                console.log('goodbye!');
        }
}

function logToppings2(topping, index, array) {
        console.log(' ---------------- ', index);
        console.log(`current topping: ${topping}`);
        index ? console.log(`prev topping: ${array[index - 1]}`) : null;
        index != array.length - 1 ? console.log(`next topping: ${array[index + 1]}`) : console.log('goodbye!');
}

// toppings.forEach((el, i) => console.log(el + i));
toppings.forEach(logToppings2);

console.clear();

const newAr = toppings.map(el => el.toUpperCase()).map(el => `${el} fake`);

function capitalize(word) {
        return word[0].toUpperCase() + word.slice(1);
}

function addStukan(word) {
        return `${word} Stukan`;
}

const nameAr = ['artem', 'tanya', 'larisa', 'igor'];
console.log(nameAr.map(capitalize).map(addStukan));

console.log(orderTotals);
const orderTotalsWithTax = orderTotals.map(total => Math.round(total * 1.2));
console.log(orderTotalsWithTax);

const cleanPeople = people.map(function(person) {
        console.log(person);
        const birthdayTS = new Date(person.birthday).getTime();
        const now = Date.now();
        const age = Math.floor((now - birthdayTS) / 31536000000);
        const birthday = age;
        // return { ...person, age };
        return {
                fullName: `${person.names.first} ${person.names.last}`,
                age,
        };
});

console.table(people);
console.table(cleanPeople);

const over40 = cleanPeople.filter(person => person.age >= 40);
console.table(over40);
console.clear();

function isStudent(student) {
        return student.id === '565a';
}

function findStudentById(id) {
        return function(student) {
                return student.id === id;
        };
}

function findStudentByProp(prop, value) {
        return function(student) {
                return student[prop] === value;
        };
}

const bestStudent = students.find(findStudentByProp('first_name', 'Lorry'));
console.table(bestStudent);
console.clear();

let total = 0;
orderTotals.forEach(el => {
        total += el;
});
console.log(total);

const orderTotalsSum = orderTotals.reduce((acc, value) => acc + value, 0);
console.log(orderTotalsSum);
console.clear();

// const inventoryCounts = inventory.reduce(((acc, value) => acc + value.price), 0);
// const inventorySting = inventory.reduce(((acc, value) => acc + value.type + ', '), '');
// console.log(inventoryCounts);
// console.log(inventorySting);

const inventoryCounts = inventory.reduce((acc, value) => {
        acc[value.type] = acc[value.type] ? acc[value.type] + 1 : 1;
        // if (acc[value.type]) {
        //         acc[value.type]++;
        // } else {
        //         acc[value.type] = 1;
        // }
        return acc;
}, {});

console.log(inventoryCounts);
console.clear();

const htmlTextCopy = `
–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
–í—ã–±—Ä–∞—Ç—å —è–∑—ã–∫
–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–∏—Å–∫—É
–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ –∏ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞
–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤
–ü–æ–∏—Å–∫ –Ω–∞ MDN
–ü–æ–∏—Å–∫ –Ω–∞ MDN
–í–æ–π—Ç–∏
Array.prototype.reduce()
–ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ –í–µ–±-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤–ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ JavaScript–ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ø–æ JavaScript–ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã–ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ ArrayArray.prototype.reduce()
–†—É—Å—Å–∫–∏–π
‚ñº
–ù–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
–°–∏–Ω—Ç–∞–∫—Å–∏—Å
–û–ø–∏—Å–∞–Ω–∏–µ
–ü—Ä–∏–º–µ—Ä—ã
–ü–æ–ª–∏—Ñ–∏–ª–ª
–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –±—Ä–∞—É–∑–µ—Ä–∞–º–∏
–°–º–æ—Ç—Ä–∏—Ç–µ —Ç–∞–∫–∂–µ
–ú–µ—Ç–æ–¥ reduce() –ø—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é reducer –∫ –∫–∞–∂–¥–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É –º–∞—Å—Å–∏–≤–∞ (—Å–ª–µ–≤–∞-–Ω–∞–ø—Ä–∞–≤–æ), –≤–æ–∑–≤—Ä–∞—â–∞—è –æ–¥–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.


–°–∏–Ω—Ç–∞–∫—Å–∏—Å
array.reduce(callback[, initialValue])
–ü–∞—Ä–∞–º–µ—Ç—Ä—ã
callback
–§—É–Ω–∫—Ü–∏—è, –≤—ã–ø–æ–ª–Ω—è—é—â–∞—è—Å—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å—Å–∏–≤–∞, –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —á–µ—Ç—ã—Ä–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞:
accumulator
–ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä, –∞–∫–∫—É–º—É–ª–∏—Ä—É—é—â–∏–π –∑–Ω–∞—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—è callback –ø–æ—Å–ª–µ –ø–æ—Å–µ—â–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞, –ª–∏–±–æ –∑–Ω–∞—á–µ–Ω–∏–µ initialValue, –µ—Å–ª–∏ –æ–Ω–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ (—Å–º–æ—Ç—Ä–∏—Ç–µ –ø–æ—è—Å–Ω–µ–Ω–∏—è –Ω–∏–∂–µ).
currentValue
–¢–µ–∫—É—â–∏–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞.
index–ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π
–ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å—Å–∏–≤–∞.
array–ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π
–ú–∞—Å—Å–∏–≤, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è reduce.
initialValue–ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π
–ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä. –û–±—ä–µ–∫—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–µ—Ä–≤–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ —Ñ—É–Ω–∫—Ü–∏–∏ callback.
–û–ø–∏—Å–∞–Ω–∏–µ
–ú–µ—Ç–æ–¥ reduce() –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é callback –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞, –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –≤ –º–∞—Å—Å–∏–≤–µ, –∑–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º –ø—É—Å—Ç–æ—Ç, –ø—Ä–∏–Ω–∏–º–∞—è —á–µ—Ç—ã—Ä–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞: –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –≤—ã–∑–æ–≤–∞ callback), –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞, —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –∏ –º–∞—Å—Å–∏–≤, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∏—Ç–µ—Ä–∞—Ü–∏—è.

–ü—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ —Ñ—É–Ω–∫—Ü–∏–∏, –ø–∞—Ä–∞–º–µ—Ç—Ä—ã accumulator –∏ currentValue –º–æ–≥—É—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –æ–¥–Ω–æ –∏–∑ –¥–≤—É—Ö –∑–Ω–∞—á–µ–Ω–∏–π. –ï—Å–ª–∏ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ reduce() –ø–µ—Ä–µ–¥–∞–Ω –∞—Ä–≥—É–º–µ–Ω—Ç initialValue, —Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ accumulator –±—É–¥–µ—Ç —Ä–∞–≤–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—é initialValue, –∞ –∑–Ω–∞—á–µ–Ω–∏–µ currentValue –±—É–¥–µ—Ç —Ä–∞–≤–Ω—ã–º –ø–µ—Ä–≤–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é –≤ –º–∞—Å—Å–∏–≤–µ. –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç initialValue –Ω–µ –∑–∞–¥–∞–Ω, —Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ accumulator –±—É–¥–µ—Ç —Ä–∞–≤–Ω—ã–º –ø–µ—Ä–≤–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é –≤ –º–∞—Å—Å–∏–≤–µ, –∞ –∑–Ω–∞—á–µ–Ω–∏–µ currentValue –±—É–¥–µ—Ç —Ä–∞–≤–Ω—ã–º –≤—Ç–æ—Ä–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é –≤ –º–∞—Å—Å–∏–≤–µ.

–ï—Å–ª–∏ –º–∞—Å—Å–∏–≤ –ø—É—Å—Ç–æ–π –∏ –∞—Ä–≥—É–º–µ–Ω—Ç initialValue –Ω–µ —É–∫–∞–∑–∞–Ω, –±—É–¥–µ—Ç –±—Ä–æ—à–µ–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ TypeError. –ï—Å–ª–∏ –º–∞—Å—Å–∏–≤ —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –µ–≥–æ –ø–æ–ª–æ–∂–µ–Ω–∏—è –≤ –º–∞—Å—Å–∏–≤–µ) –∏ –∞—Ä–≥—É–º–µ–Ω—Ç initialValue –Ω–µ —É–∫–∞–∑–∞–Ω, –∏–ª–∏ –µ—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç initialValue —É–∫–∞–∑–∞–Ω, –Ω–æ –º–∞—Å—Å–∏–≤ –ø—É—Å—Ç–æ–π, —Ç–æ –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ –æ–¥–Ω–æ —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ, –±–µ–∑ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏ callback.

–ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ reduce() –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:

[0, 1, 2, 3, 4].reduce(function(previousValue, currentValue, index, array) {
  return previousValue + currentValue;
});
–§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω–∞ —á–µ—Ç—ã—Ä–µ —Ä–∞–∑–∞, –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –≤—ã–∑–æ–≤–µ –±—É–¥—É—Ç —Å–ª–µ–¥—É—é—â–∏–º–∏:

previousValue	currentValue	index	array	–≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
–ø–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤	0	1	1	[0, 1, 2, 3, 4]	1
–≤—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤	1	2	2	[0, 1, 2, 3, 4]	3
—Ç—Ä–µ—Ç–∏–π –≤—ã–∑–æ–≤	3	3	3	[0, 1, 2, 3, 4]	6
—á–µ—Ç–≤—ë—Ä—Ç—ã–π –≤—ã–∑–æ–≤	6	4	4	[0, 1, 2, 3, 4]	10
–ó–Ω–∞—á–µ–Ω–∏–µ, –≤–æ–∑–≤—Ä–∞—â—ë–Ω–Ω–æ–µ –º–µ—Ç–æ–¥–æ–º reduce() –±—É–¥–µ—Ç —Ä–∞–≤–Ω—ã–º –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ (10).

–ï—Å–ª–∏ –∂–µ –≤—ã –∑–∞–¥–∞–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ initialValue, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–∞–∫:

[0, 1, 2, 3, 4].reduce(function(accumulator, currentValue, index, array) {
  return accumulator + currentValue;
}, 10);
accumulator	currentValue	index	array	–≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
–ø–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤	10	0	0	[0, 1, 2, 3, 4]	10
–≤—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤	10	1	1	[0, 1, 2, 3, 4]	11
—Ç—Ä–µ—Ç–∏–π –≤—ã–∑–æ–≤	11	2	2	[0, 1, 2, 3, 4]	13
—á–µ—Ç–≤—ë—Ä—Ç—ã–π –≤—ã–∑–æ–≤	13	3	3	[0, 1, 2, 3, 4]	16
–ø—è—Ç—ã–π –≤—ã–∑–æ–≤	16	4	4	[0, 1, 2, 3, 4]	20
–ó–Ω–∞—á–µ–Ω–∏–µ, –≤–æ–∑–≤—Ä–∞—â—ë–Ω–Ω–æ–µ –º–µ—Ç–æ–¥–æ–º reduce() –Ω–∞ —ç—Ç–æ—Ç —Ä–∞–∑, –∫–æ–Ω–µ—á–Ω–æ –∂–µ, –±—É–¥–µ—Ç —Ä–∞–≤–Ω—ã–º 20.

–ü—Ä–∏–º–µ—Ä—ã
–°—É–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ –º–∞—Å—Å–∏–≤–µ
var total = [0, 1, 2, 3].reduce(function(a, b) {
  return a + b;
});
// total == 6
–°—É–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –≤ –º–∞—Å—Å–∏–≤–µ –æ–±—ä–µ–∫—Ç–æ–≤
–ß—Ç–æ–±—ã —Å—É–º–º–∏—Ä–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ—Å—è –≤ –º–∞—Å—Å–∏–≤–µ –æ–±—ä–µ–∫—Ç–æ–≤, –≤—ã –¥–æ–ª–∂–Ω—ã —É–∫–∞–∑–∞—Ç—å initialValue, —á—Ç–æ–±—ã –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–º–æ–≥ –ø—Ä–æ–π—Ç–∏ —á–µ—Ä–µ–∑ callback.

var initialValue = 0;
var sum = [{x: 1}, {x:2}, {x:3}].reduce(function (accumulator, currentValue) {
    return accumulator + currentValue.x;
}, initialValue)
// sum == 6
–¢–æ–∂–µ —Å–∞–º–æ–µ, –Ω–æ —Å–æ —Å—Ç—Ä–µ–ª–æ—á–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π: 

var initialValue = 0;
var sum = [{x: 1}, {x:2}, {x:3}].reduce(
    (accumulator, currentValue) => accumulator + currentValue.x,
    initialValue
);
// sum == 6
–†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ –º–∞—Å—Å–∏–≤–æ–≤
var flattened = [[0, 1], [2, 3], [4, 5]].reduce(function(a, b) {
  return a.concat(b);
});
// flattened —Ä–∞–≤–µ–Ω [0, 1, 2, 3, 4, 5]
–ü—Ä–∏–º–µ—Ä: —Å–∫–ª–µ–∏–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–æ–≤, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö—Å—è –≤ –æ–±—ä–µ–∫—Ç–∞—Ö –º–∞—Å—Å–∏–≤–∞, —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∏ initialValue
// friends - —Å–ø–∏—Å–æ–∫ –∏–∑ –æ–±—ä–µ–∫—Ç–æ–≤(–¥—Ä—É–∑–µ–π) 
// –≥–¥–µ –ø–æ–ª–µ "books" - —Å–ø–∏—Å–æ–∫ –ª—é–±–∏–º—ã—Ö –∫–Ω–∏–≥ –¥—Ä—É–≥–∞ 
var friends = [ 
{ name: "Anna", books: ["Bible", "Harry Potter"], age: 21 }, 
{ name: "Bob", books: ["War and peace", "Romeo and Juliet"], age: 26 },
{ name: "Alice", books: ["The Lord of the Rings", "The Shining"], age: 18 }
]

// allbooks - —Å–ø–∏—Å–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤—Å–µ –∫–Ω–∏–≥–∏ –¥—Ä—É–∑–µ–π + 
// –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É–∫–∞–∑–∞–Ω–Ω—ã–π –≤ initialValue
var allbooks = friends.reduce(function(prev, curr) {
  return [...prev, ...curr.books];
}, ["Alphabet"]);

// allbooks = ["Alphabet", "Bible", "Harry Potter", "War and peace", 
// "Romeo and Juliet", "The Lord of the Rings", "The Shining"]
–ü–æ–ª–∏—Ñ–∏–ª–ª
–ú–µ—Ç–æ–¥ Array.prototype.reduce() –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É ECMA-262 –≤ 5-–º –∏–∑–¥–∞–Ω–∏–∏; –ø–æ—ç—Ç–æ–º—É –æ–Ω –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –¥—Ä—É–≥–∏—Ö —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞. –í—ã –º–æ–∂–µ—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –Ω–∏–º, –¥–æ–±–∞–≤–∏–≤ —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–¥ –≤ –Ω–∞—á–∞–ª–æ –≤–∞—à–∏—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤, –æ–Ω –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å reduce() –≤ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è—Ö, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç —ç—Ç–æ—Ç –º–µ—Ç–æ–¥.

// –®–∞–≥–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ ECMA-262, 5-–µ –∏–∑–¥–∞–Ω–∏–µ, 15.4.4.21
// –°—Å—ã–ª–∫–∞ (en): http://es5.github.io/#x15.4.4.21
// –°—Å—ã–ª–∫–∞ (ru): http://es5.javascript.ru/x15.4.html#x15.4.4.21
if (!Array.prototype.reduce) {
  Array.prototype.reduce = function(callback/*, initialValue*/) {
    'use strict';
    if (this == null) {
      throw new TypeError('Array.prototype.reduce called on null or undefined');
    }
    if (typeof callback !== 'function') {
      throw new TypeError(callback + ' is not a function');
    }
    var t = Object(this), len = t.length >>> 0, k = 0, value;
    if (arguments.length >= 2) {
      value = arguments[1];
    } else {
      while (k < len && ! (k in t)) {
        k++; 
      }
      if (k >= len) {
        throw new TypeError('Reduce of empty array with no initial value');
      }
      value = t[k++];
    }
    for (; k < len; k++) {
      if (k in t) {
        value = callback(value, t[k], k, t);
      }
    }
    return value;
  };
}
–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è	–°—Ç–∞—Ç—É—Å	–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
ECMAScript 5.1 (ECMA-262)
–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ 'Array.prototype.reduce()' –≤ —ç—Ç–æ–π —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏.	–°—Ç–∞–Ω–¥–∞—Ä—Ç	–ò–∑–Ω–∞—á–∞–ª—å–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ. –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ JavaScript 1.8.
ECMAScript 2015 (6th Edition, ECMA-262)
–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ 'Array.prototype.reduce()' –≤ —ç—Ç–æ–π —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏.	–°—Ç–∞–Ω–¥–∞—Ä—Ç	
ECMAScript (ECMA-262)
–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ 'Array.prototype.reduce()' –≤ —ç—Ç–æ–π —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏.	–ñ–∏–≤–æ–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç	
–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –±—Ä–∞—É–∑–µ—Ä–∞–º–∏
Update compatibility data on GitHub
–ö–æ–º–ø—å—é—Ç–µ—Ä—ã	–ú–æ–±–∏–ª—å–Ω—ã–µ	Server
Chrome	Edge	Firefox	Internet Explorer	Opera	Safari	Android webview	Chrome –¥–ª—è Android	Firefox –¥–ª—è Android	Opera –¥–ª—è Android	Safari on iOS	Samsung Internet	Node.js
reduce	–ü–æ–ª–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞3	–ü–æ–ª–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞12	–ü–æ–ª–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞3	–ü–æ–ª–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞9	–ü–æ–ª–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞10.5	–ü–æ–ª–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞5	–ü–æ–ª–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞‚â§37	–ü–æ–ª–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞18	–ü–æ–ª–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞4	–ü–æ–ª–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞14	–ü–æ–ª–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞4	–ü–æ–ª–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞1.0	–ü–æ–ª–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞0.1.100





What are we missing?
–õ–µ–≥–µ–Ω–¥–∞
–ü–æ–ª–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ 
–ü–æ–ª–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
–°–º–æ—Ç—Ä–∏—Ç–µ —Ç–∞–∫–∂–µ
Array.prototype.reduceRight()
Metadata
–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: 14 –∞–≤–≥. 2019 –≥., –ø–æ–º–æ—â–Ω–∏–∫–∞–º–∏ MDN
–°–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–µ–º—ã
–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
Array
–°–≤–æ–π—Å—Ç–≤–∞
Array.length
Array.prototype[@@unscopables]
–ú–µ—Ç–æ–¥—ã
Array.from()
Array.isArray()
Array.of()
Array.prototype.concat()
Array.prototype.copyWithin()
Array.prototype.entries()
Array.prototype.every()
Array.prototype.fill()
Array.prototype.filter()
Array.prototype.find()
Array.prototype.findIndex()
Array.prototype.flat()
Array.prototype.flatMap()
Array.prototype.forEach()
Array.prototype.includes()
Array.prototype.indexOf()
Array.prototype.join()
Array.prototype.keys()
Array.prototype.lastIndexOf()
Array.prototype.map()
Array.prototype.pop()
Array.prototype.push()
Array.prototype.reduce()
Array.prototype.reduceRight()
Array.prototype.reverse()
Array.prototype.shift()
Array.prototype.slice()
Array.prototype.some()
Array.prototype.sort()
Array.prototype.splice()
Array.prototype.toLocaleString()
Array.prototype.toSource()
Array.prototype.toString()
Array.prototype.unshift()
Array.prototype.values()
Array.prototype[@@iterator]()
get Array[@@species]
–ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ:
Function
–°–≤–æ–π—Å—Ç–≤–∞
Function.arguments
Function.caller
Function.displayName
Function.length
Function.name
–ú–µ—Ç–æ–¥—ã
Function.prototype.apply()
Function.prototype.bind()
Function.prototype.call()
Function.prototype.toSource()
Function.prototype.toString()
Object
–°–≤–æ–π—Å—Ç–≤–∞
Object.prototype.__proto__
Object.prototype.constructor
–ú–µ—Ç–æ–¥—ã
Object.prototype.__defineGetter__()
Object.prototype.__defineSetter__()
Object.prototype.__lookupGetter__()
Object.prototype.__lookupSetter__()
Object.prototype.hasOwnProperty()
Object.prototype.isPrototypeOf()
Object.prototype.propertyIsEnumerable()
Object.prototype.toLocaleString()
Object.prototype.toSource()
Object.prototype.toString()
Object.prototype.valueOf()
Object.setPrototypeOf()
–ò–∑—É—á–∏—Ç–µ –ª—É—á—à–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ –í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
–ü–æ–ª—É—á–∞–π—Ç–µ —Å–∞–º—ã–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤–∞–∂–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ç MDN –ø—Ä—è–º–æ –≤ –≤–∞—à –ø–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫.

–í –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç —Ä–∞—Å—Å—ã–ª–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ.


–≠–ª. –ø–æ—á—Ç–∞
email@test.ru
–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è —Å–µ–π—á–∞—Å
–°–∫—Ä—ã—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –Ω–æ–≤–æ—Å—Ç–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É
–í–µ–±-–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è MDN
–í–µ–±-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
–ò–∑—É—á–µ–Ω–∏–µ –í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
–û MDN
–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤
–û –Ω–∞—Å
MDN Web Docs Store
–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
Firefox
MDN
Mozilla
¬© 2005-2020 Mozilla and individual contributors. Content is available under these licenses.

–£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—Å—Ç—å
–ö—É–∫–∏
`;

console.log(htmlTextCopy.length);

// const letterMap = new Map();
// const letterSet = new Set();
// htmlTextCopy.split('').forEach(function(letter) {
//         letterMap.set(letter, letterMap.has(letter) ? letterMap.get(letter) + 1 : 1);
//         letterSet.add(letter);
// });

// console.log(letterMap);
// console.log(Array.from(letterMap));

// console.log(letterSet);
// console.log(Array.from(letterSet));

console.log('NOW THE RIGHT WAY?');
// const reducedAr = htmlTextCopy.split('').reduce((accArray, letter) => [...accArray, ...letter], []);
// console.log(reducedAr);
// console.log(reducedAr.length);

// const reducedObj = htmlTextCopy.split('').reduce((accArray, letter) => {
//         accArray[letter] = accArray[letter] ? accArray[letter] + 1 : 1;
//         return accArray;
// }, {});
// console.log(reducedObj);
// console.log(Object.entries(reducedObj).length);

function isValidCaracter(char) {
        // (letter >= 'A' && letter <= 'z') || (letter >= '–ê' && letter <= '—è')
        return char.match(/[a-z–∞-—è0-9]/i);
}

function transformToLowerCase(char) {
        return char.toLowerCase();
}

const uniqueCharCounter = (accArray, letter) => {
        accArray[letter] = accArray[letter] ? accArray[letter] + 1 : 1;
        return accArray;
};

// const result = mdnTextAr.filter(letter =>
//         // (letter >= 'A' && letter <= 'z') || (letter >= '–ê' && letter <= '—è')
//         letter.match(/[a-z–∞-—è]/i)
// );

// const mdnTextAr = htmlTextCopy.split('');
// const mdnTextAr = htmlTextCopy.split('').map(letter => letter.toLowerCase());

const result = htmlTextCopy
        .split('')
        .filter(isValidCaracter)
        .map(transformToLowerCase)
        .reduce(uniqueCharCounter, {});
console.log(result.length);

// const reducedObj = result.reduce((accArray, letter) => {
//         accArray[letter] = accArray[letter] ? accArray[letter] + 1 : 1;
//         return accArray;
// }, {});
console.log(result);
console.log(Object.entries(result).length);

const toSortResults = (a, b) => b[1] - a[1];
const sortedResults = Object.entries(result).sort(toSortResults);

console.log(sortedResults); 
